// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sim_vsveipdr
arma::mat sim_vsveipdr(int t_max, arma::vec y, arma::vec alpha, arma::vec beta, arma::vec gamma_d, arma::vec gamma_r, double theta, int M, double phi_1, double phi_2, double mu_1, double mu_2, double kappa, double rho, int r_beta);
RcppExport SEXP _objfunction_sim_vsveipdr(SEXP t_maxSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gamma_dSEXP, SEXP gamma_rSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP phi_1SEXP, SEXP phi_2SEXP, SEXP mu_1SEXP, SEXP mu_2SEXP, SEXP kappaSEXP, SEXP rhoSEXP, SEXP r_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_d(gamma_dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_r(gamma_rSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type phi_1(phi_1SEXP);
    Rcpp::traits::input_parameter< double >::type phi_2(phi_2SEXP);
    Rcpp::traits::input_parameter< double >::type mu_1(mu_1SEXP);
    Rcpp::traits::input_parameter< double >::type mu_2(mu_2SEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type r_beta(r_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_vsveipdr(t_max, y, alpha, beta, gamma_d, gamma_r, theta, M, phi_1, phi_2, mu_1, mu_2, kappa, rho, r_beta));
    return rcpp_result_gen;
END_RCPP
}
// object_alpha
arma::rowvec object_alpha(arma::vec x, arma::mat dat_sim_before, int t_choose, int iter, double theta, int M, int r_beta, arma::mat bspline1);
RcppExport SEXP _objfunction_object_alpha(SEXP xSEXP, SEXP dat_sim_beforeSEXP, SEXP t_chooseSEXP, SEXP iterSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP r_betaSEXP, SEXP bspline1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat_sim_before(dat_sim_beforeSEXP);
    Rcpp::traits::input_parameter< int >::type t_choose(t_chooseSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bspline1(bspline1SEXP);
    rcpp_result_gen = Rcpp::wrap(object_alpha(x, dat_sim_before, t_choose, iter, theta, M, r_beta, bspline1));
    return rcpp_result_gen;
END_RCPP
}
// sim_vsveipdr_Gs
arma::mat sim_vsveipdr_Gs(int t_max, arma::vec y, arma::vec alpha, arma::vec beta, arma::vec gamma_d, arma::vec gamma_r, double theta, int M, arma::vec dG1s, arma::vec dG2s, double mu_1, double mu_2, double kappa, double rho, int r_beta);
RcppExport SEXP _objfunction_sim_vsveipdr_Gs(SEXP t_maxSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gamma_dSEXP, SEXP gamma_rSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP dG1sSEXP, SEXP dG2sSEXP, SEXP mu_1SEXP, SEXP mu_2SEXP, SEXP kappaSEXP, SEXP rhoSEXP, SEXP r_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_d(gamma_dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_r(gamma_rSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dG1s(dG1sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dG2s(dG2sSEXP);
    Rcpp::traits::input_parameter< double >::type mu_1(mu_1SEXP);
    Rcpp::traits::input_parameter< double >::type mu_2(mu_2SEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type r_beta(r_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_vsveipdr_Gs(t_max, y, alpha, beta, gamma_d, gamma_r, theta, M, dG1s, dG2s, mu_1, mu_2, kappa, rho, r_beta));
    return rcpp_result_gen;
END_RCPP
}
// object_kappa_tra
arma::rowvec object_kappa_tra(arma::vec x, arma::mat dat_sim, int t_V, int iter, double theta, int M, double mu_1, double mu_2, int r_beta, arma::mat bspline2);
RcppExport SEXP _objfunction_object_kappa_tra(SEXP xSEXP, SEXP dat_simSEXP, SEXP t_VSEXP, SEXP iterSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP mu_1SEXP, SEXP mu_2SEXP, SEXP r_betaSEXP, SEXP bspline2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat_sim(dat_simSEXP);
    Rcpp::traits::input_parameter< int >::type t_V(t_VSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type mu_1(mu_1SEXP);
    Rcpp::traits::input_parameter< double >::type mu_2(mu_2SEXP);
    Rcpp::traits::input_parameter< int >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bspline2(bspline2SEXP);
    rcpp_result_gen = Rcpp::wrap(object_kappa_tra(x, dat_sim, t_V, iter, theta, M, mu_1, mu_2, r_beta, bspline2));
    return rcpp_result_gen;
END_RCPP
}
// object_kappa
arma::rowvec object_kappa(arma::vec x, arma::mat dat_sim, int t_V, int iter, double theta, int M, double mu_1, double mu_2, int r_beta, arma::mat bspline2, int inter_b_min, int inter_b_max, int inter_l);
RcppExport SEXP _objfunction_object_kappa(SEXP xSEXP, SEXP dat_simSEXP, SEXP t_VSEXP, SEXP iterSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP mu_1SEXP, SEXP mu_2SEXP, SEXP r_betaSEXP, SEXP bspline2SEXP, SEXP inter_b_minSEXP, SEXP inter_b_maxSEXP, SEXP inter_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat_sim(dat_simSEXP);
    Rcpp::traits::input_parameter< int >::type t_V(t_VSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type mu_1(mu_1SEXP);
    Rcpp::traits::input_parameter< double >::type mu_2(mu_2SEXP);
    Rcpp::traits::input_parameter< int >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bspline2(bspline2SEXP);
    Rcpp::traits::input_parameter< int >::type inter_b_min(inter_b_minSEXP);
    Rcpp::traits::input_parameter< int >::type inter_b_max(inter_b_maxSEXP);
    Rcpp::traits::input_parameter< int >::type inter_l(inter_lSEXP);
    rcpp_result_gen = Rcpp::wrap(object_kappa(x, dat_sim, t_V, iter, theta, M, mu_1, mu_2, r_beta, bspline2, inter_b_min, inter_b_max, inter_l));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_objfunction_sim_vsveipdr", (DL_FUNC) &_objfunction_sim_vsveipdr, 15},
    {"_objfunction_object_alpha", (DL_FUNC) &_objfunction_object_alpha, 8},
    {"_objfunction_sim_vsveipdr_Gs", (DL_FUNC) &_objfunction_sim_vsveipdr_Gs, 15},
    {"_objfunction_object_kappa_tra", (DL_FUNC) &_objfunction_object_kappa_tra, 10},
    {"_objfunction_object_kappa", (DL_FUNC) &_objfunction_object_kappa, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_objfunction(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
